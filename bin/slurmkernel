#!/usr/bin/env python3

"""
Manage (create, list, modify and delete) and starting jupyter slurm kernels using srun
"""

import argparse;
import json;
import sys;
import os;
import getpass;
import re;
import tempfile;
import subprocess
from venv import create;
import slurm_jupyter_kernel;
from pathlib import Path;
from shutil import copy, rmtree 
from pexpect import pxssh;
try:
    from jupyter_client import kernelspec;
except ImportError:
    from IPython.kernel import kernelspec;

def add_slurm_kernel (kernel_displayname, kernel_language, kernel_cmd, slurm_parameter, loginnode, user, proxyjump, srun_cmd="srun", kernel_environment=None):
   
    print(f"\n\033[94m\u2687\033[0m Try to create slurm kernel '{kernel_displayname}'... \033[0m");
    args = [str(sys.executable), '-m', 'slurm_jupyter_kernel'];

    args.extend(['--slurm-parameter', slurm_parameter]);
    args.extend(['--loginnode', user+'@'+loginnode]);
    args.extend(['--proxyjump', proxyjump]);
    if srun_cmd is None:
        srun_cmd = 'srun';
    args.extend(['--srun-cmd', srun_cmd]);

    kernel_cmd = kernel_cmd.format(connection_file='{remote_connection_file}');
    args.extend(['--kernel-cmd', kernel_cmd]);
    args.extend(['--connection-file', '{connection_file}']);

    if not re.search('slurm', str(kernel_displayname), re.IGNORECASE):
        kernel_displayname = "Slurm " + str(kernel_displayname);

    kerneldir_name = kernel_displayname.replace(' ', '_');
    username = getpass.getuser();

    kernel_env = {}
    if not kernel_environment is None:
        kernel_env = dict( (key.strip(), val.strip()) for key, val in (item.split('=') for item in kernel_environment.split(',')) ); 
        args.extend(['--environment', str(kernel_env)]);

    json_kernel = {
        'display_name': kernel_displayname,
        'env': kernel_env,
        'metadata': {"remote_slurm_kernel": True},
        'argv': args
    };
    if not kernel_language is None:
        json_kernel['language'] = kernel_language;

    # create a temporary jupyter kernel directory
    tempdir = tempfile.mkdtemp();

    kernel_loc = os.path.join(str(tempdir), 'kernel.json');
    with open(os.path.join(tempdir, 'kernel.json'), 'w') as kfile:
        json.dump(json_kernel, kfile, indent=2, sort_keys=True);

    img_dir = str(Path(slurm_jupyter_kernel.__file__).parent.parent) + '/imgs/';
    if os.path.isdir(str(img_dir)):
        copy(str(img_dir) + 'logo-32x32.png', str(tempdir));
        copy(str(img_dir) + 'logo-64x64.png', str(tempdir));

    kernel_path = kernelspec.install_kernel_spec(tempdir, kerneldir_name, user=username);

    print(f'\033[94m\u2714\033[0m \033[95m\033[0mSuccessfully created kernel: {kernel_path}\033[0m');

def delete_slurm_kernel ():
    
    selected_kernel = _select_slurm_kernel();

    while True:
        print(f'Following kernel selected: \033[1m\033[93m{selected_kernel}\033[0m');
        delete_yes_no = input('Are you sure you want to delete the selected kernel? [Y,n] ');
        if delete_yes_no == '' or delete_yes_no.upper() == 'Y':
            rmtree(str(selected_kernel));
            print(f'Kernel \033[92m{selected_kernel}\033[0m deleted');
            sys.exit();
        elif delete_yes_no.upper() == 'N':
            print('\033[94mI did not delete the selected kernel\033[0m');
            sys.exit();
        else:
            print('\033[91mInvalid input. Please try again!\033[0m');
            continue;

def _select_slurm_kernel ():

    available_slurm_kernel = list_slurm_kernel(returnonly=True);

    if available_slurm_kernel is None:
        sys.exit();

    if len(available_slurm_kernel) >= 1:
        while True:
            print("\033[4mFollowing kernels found:\033[0m\n");
            iterator = 0;
            old_slurm_kernels = False;
            for kernelfile, data in available_slurm_kernel.items():
            #print('\n\033[91m\u2B51\033[0m = Maybe an old version of a jupyter slurm kernel');

                try:
                    if data[4]['maybe_old_slurm_kernel'] == True:
                        old_slurm_kernels = True;
                        print(f'\033[94m[{iterator}]\033[0m \033[91m\u2B51\033[0m {kernelfile}');
                    else:
                        print(f'\033[94m[{iterator}]\033[0m {kernelfile}');
                except:
                    print(f'\033[94m[{iterator}]\033[0m {kernelfile}');

                iterator += 1;

            if old_slurm_kernels == True:
                print('\n\033[91m\u2B51\033[0m = Maybe an old version of a jupyter slurm kernel\n');

            identifier = input('Select a kernel using the \033[94midentifier\033[0m:\033[94m ');
            try:
                key = list(available_slurm_kernel.keys())[int(identifier)];
            except IndexError:
                print(f'\033[91mInvalid identifier: {identifier}\033[0m\n');
                continue;
            print('\033[0m');
            if key:
                return key;
            else:
                return False;


def modify_slurm_kernel (editor=None):

    selected_kernel = _select_slurm_kernel();
    if selected_kernel:
        kernelspec = selected_kernel + '/kernel.json';
        if editor is None:
            try:
                editor = os.environ['EDITOR'];
            except KeyError:
                print(f'\033[91m$EDITOR not set. Please explicity set an editor with --editor (e.g. --editor vim)\033[0m\n');
                sys.exit();
        else:
            # TODO: Check explicity set editor (which editor)
            pass;

        while True:
            edit_process = subprocess.Popen(f'{editor} {kernelspec}', shell=True);
            (stdout, stderr) = edit_process.communicate();
            edit_process_status = edit_process.wait();
            try:
                # check modified kernel.json
                with open(kernelspec, 'r') as f:
                    json.loads(f.read());

            except json.decoder.JSONDecodeError:
                print(f'\033[91mError parsing the modified kernel.json!\033[0m\n');
                re_run = input('Would you like to re-run the edit mode? [Y,n] ');
                if re_run == '' or re_run.upper() == 'Y':
                    continue;
                elif re_run.upper() == 'N':
                    break;
                else:
                    print(f'\033[91mInvalid input {re_run}! Aborting.\033[0m\n');
                    break;
            
            break;
            
        # Modify done
        print(f'Successfully modified {kernelspec}!');
        sys.exit();
    

def list_slurm_kernel (all=False, verbose=False, returnonly=False):

    kernelspecs = kernelspec.find_kernel_specs();
    slurm_kernels = {};

    # iterate throuh all available kernels
    for kernel, file in kernelspecs.items():
        try:
            kernel_spec = kernelspec.get_kernel_spec(kernel);
        except json.decoder.JSONDecodeError:
            print(f'\033[91mError parsing {file}/kernel.json! Invalid JSON.\033[0m');
            continue;

        add = False;
        if all:
            add = True;
        else:
            try:
                is_slurm_kernel = kernel_spec.metadata['remote_slurm_kernel'];
                if is_slurm_kernel == True:
                    add = True;
            except KeyError:
                # maybe its an old jupyter slurm kernel
                kernelname = kernel.split('/')[-1];
                kernelname = kernelname.upper();
                check_name = kernelname.split('_');
                if 'SLURM' in check_name:
                    kernel_spec.metadata['maybe_old_slurm_kernel'] = True;
                    add = True;
        if add:
            slurm_kernels.update({str(file): [kernel_spec.name, kernel_spec.display_name, kernel_spec.language, kernel_spec.env, kernel_spec.metadata]});
    
    if len(slurm_kernels) >= 1:
        # return only
        if returnonly:
            return slurm_kernels;

        maybe_old_versions = False;

        print("\033[4mFollowing kernels found:\033[0m\n");
        for kernel, data in slurm_kernels.items():
            try:
                if data[4]['maybe_old_slurm_kernel'] == True:
                    maybe_old_versions = True;
                    print(f'\033[94m\u27A4\033[0m \033[95m{kernel} (\033[91m\u2B51\033[95m)\033[0m');
                else:
                    print(f'\033[94m\u27A4\033[0m \033[95m{kernel}\033[0m');
            
            except:
                print(f'\033[94m\u27A4\033[0m \033[95m{kernel}\033[0m');
            if verbose:
                if data[0]:
                    print(f'  \u2937  \033[1mKernel Name  : \033[0m{data[0]}');
                else:
                    kernelname = kernel.split('/')[-1];
                    print(f'  \u2937  \033[1mKernel Name  : \033[0m{kernelname}') ;
                if data[2]: print(f'  \u2937  \033[1mLanguage     : \033[0m{data[2]}');
                if data[1]: print(f'  \u2937  \033[1mDisplay Name : \033[0m{data[1]}');
                if data[3]: print(f'  \u2937  \033[1mEnvironment  : \033[0m{data[3]}');
                print('');

        if maybe_old_versions == True:
            print('\n\033[91m\u2B51\033[0m = Maybe an old version of a jupyter slurm kernel');

    else:
        print('Currently no installed kernels found!');

def yninput (inputstr=''):

    while True:
        question = input(inputstr);
        if question.upper() == 'Y' or question == '':
            return True;
        elif question.upper() == 'N':
            return False;
        else:
            continue;

def remote_initialization (loginnode=None, user=None, proxyjump=None, dry_run=False):

    template_directory = os.path.dirname(slurm_jupyter_kernel.__file__) + '/kernel_scripts';
    ssh_options = {};
    kernel_specs = ['KERNEL_LANGUAGE', 'KERNEL_DISPLAYNAME', 'KERNEL_CMD', 'KERNEL_ENVIRONMENT'];

    # get info to start up ssh connection
    proxy = '';
    if proxyjump is None:
        if not loginnode or not user:
            proxyjump = input('SSH Proxyjump (leave empty if not needed): ');
            if not proxyjump == '':
                proxy = proxyjump;
                ssh_options['ProxyJump'] = proxyjump;
    else:
        proxy = proxyjump;
        ssh_options['ProxyJump'] = proxyjump;
    if loginnode is None:
        loginnode = input('SSH Loginnode: ');
    if user is None:
        user = input(f'Username for {loginnode}: ');

    # startup ssh connection
    while True:
        try:
            print(f'\nTry to establish a ssh connection to {loginnode}');
            ssh_session = pxssh.pxssh(options=ssh_options);
            ssh_session.login(loginnode, user);
        except pxssh.ExceptionPxssh:
            sys.exit(f'Error: Could not establish a connection to host {loginnode}\nPlease check following things:\n* Running SSH agent with loaded key file\n* proxyjump, loginnode or username is correct');

        # TODO: SSH Session error handling
        if not ssh_session is None:
            print(f'\u2713 Successfully established SSH session!\n');
            break;

    # checkout which template to use
    print('List of available templates:');

    template_scripts = [ script for script in os.listdir(template_directory) if script.endswith('.sh') ];
    if len(template_scripts) >= 1:
        id = 0;
        for script in template_scripts:
            print(f'\033[94m[{id}]\033[0m {script}');
            id += 1;

        while True:
            template_to_install = input('Please choose a kernel script template to install using the \033[94midentifier\033[0m:\033[94m ');
            try:
                template_to_install = template_scripts[int(template_to_install)];
                break;
            except IndexError:
                print(f'Kernel script template with id {template_to_install} not found!\033[0m');
                continue;

        print('\033[0m');

        script_to_install = template_directory + '/' + template_to_install;

        script = open(script_to_install, 'r');
        print(f'Try to parse {template_to_install}...');

        input_variables = {};
        set_kernel_specs = {};
        execute_lines = [];
        for line in script.readlines():
            line = line.replace('\n', '');
            if line == '' or line.startswith('#'):
                continue;

            # get all input variables
            if line.startswith('INPUT_'):
                # get everything after INPUT_* = ???
                input_variables[str(line[6])] = '='.join(line.split('=')[1:]);
            # get all kernel information
            elif line.split('=')[0] in kernel_specs:
                set_kernel_specs[str(line.split('=')[0])] = '='.join(line.split('=')[1:]);
            # and all other things: the script lines to execute
            else:
                execute_lines.append(line);

        print('\033[0m');
        # now collect input data
        var_values = {};
        for varid, inputvar in input_variables.items():
            try:
                var_value = inputvar.split(';');
                try:
                    input_default = var_value[1];
                    input_title = var_value[0];
                    tag_value = input(f'{input_title} [{input_default}]: ');
                    if tag_value == '':
                        tag_value = input_default;
                except IndexError:
                    input_title = var_value[0];
                    tag_value = input(f'{input_title}: ');

                var_values[int(varid)] = tag_value;
            except IndexError:
                print(f'Warning: Skipping line "{inputvar}" due to parsing error!');

        print('\033[0m');
        # EXECUTE ALL LINES SPECIFIED IN execute_lines
        for line in execute_lines:
            for replace_item, replace_value in var_values.items():
                if '$'+str(replace_item) in line:
                    line = line.replace('$'+str(replace_item), replace_value);
                
            if dry_run == True:
                print(f"[DRY RUN/EXECUTE TEMPLATE] Would execute: {line}");
            else:
                ssh_session.sendline(str(line));

        # REPLACE '$' vars in kernel specs
        for type_spec, value in set_kernel_specs.items():
            for replace_item, replace_value in var_values.items():
                if '$'+str(replace_item) in value:
                    set_kernel_specs[str(type_spec)] = set_kernel_specs[str(type_spec)].replace('$'+str(replace_item), replace_value);

    else:
        print('No kernel script templates available!');

    print(f'Remote Host successfully initalized with script template {template_to_install}');
    # logout ssh session
    ssh_session.logout();

    # now create a local kernel with the given information
    set_kernel_specs = { key.lower(): val for key, val in set_kernel_specs.items() };
    set_kernel_specs['loginnode'] = loginnode;
    set_kernel_specs['user'] = user;
    set_kernel_specs['proxyjump'] = proxy;

    # get kernel name
    if not 'kernel_displayname' in set_kernel_specs.keys():
        set_kernel_specs['kernel_displayname'] = input('Name of the new jupyter slurm kernel: ');

    print('Please specify the Slurm job parameter to start the job with (comma-separated, e.g. "account=hpc,time=00:00:00"):');

    slurm_parameter = input('Slurm job parameter: ');
    set_kernel_specs['slurm_parameter'] = slurm_parameter;

    if dry_run == True:
        print('\n[DRY RUN/KERNEL CREATION] Would now create a local jupyter kernel with following kernel specs:\n');
        print(f'{set_kernel_specs}');
        sys.exit();

    add_slurm_kernel(**set_kernel_specs);

# TODO: Test kernel configuration
def test_slurm_kernel ():
    pass;

def main (cmd_line=None):

    parser = argparse.ArgumentParser('Tool to manage (create, list, modify and delete) and starting jupyter slurm kernels using srun');
    subparser = parser.add_subparsers(dest='command');

    add_option = subparser.add_parser('create', help='create a new slurm kernel');

    add_option.add_argument('--displayname', required=True, help='Display name of the new kernel');
    add_option.add_argument('--environment', required=False, help='Jupyter kernel environment');
    add_option.add_argument('--language', help='Programming language');
    add_option.add_argument('--loginnode', required=True, help='The login node to connect to');
    add_option.add_argument('--user', required=True, help='The username to log in to the loginnode');
    add_option.add_argument('--proxyjump', help='Add a proxy jump (SSH -J)');
    add_option.add_argument('--srun-cmd', help='Path to srun command. Default: srun');
    add_option.add_argument('--kernel-cmd', required=True, help='command to run jupyter kernel');
    add_option.add_argument('--slurm-parameter', required=True, help='Slurm job parameter');

    list_option = subparser.add_parser('list', help='list available slurm kernel');
    list_option.add_argument('-v', '--verbose', action='store_true', required=False, help='Print all kernel with the kernelspec information');
    list_option.add_argument('-a', '--all', action='store_true', required=False, help='Print all available Jupyter kernels');

    modify_option = subparser.add_parser('modify', help='modify an existing slurm kernel');
    modify_option.add_argument('-e', '--editor', help='Set a specific editor to modify the kernelspec (default: $EDITOR)');

    delete_option = subparser.add_parser('delete', help='delete an existing slurm kernel');

    rinit_option = subparser.add_parser('rinit', help='initialize remote environment (IPython env, IJulia env, ...)');
    rinit_option.add_argument('--dry-run', action='store_true', required=False, help='Activate dry-run mode. Do not execute script lines or create kernel.');
    rinit_option.add_argument('--loginnode', required=False, help='The login node to connect to');
    rinit_option.add_argument('--user', help='The username to log in to the loginnode');
    rinit_option.add_argument('--proxyjump', help='Add a proxy jump (SSH -J)');

    from slurm_jupyter_kernel.__init__ import __version__;
    parser.add_argument('--version', action='version', version='%(prog)s ({version})'.format(version=__version__));

    if len(sys.argv) == 1:
        parser.print_help();
        sys.exit();
    args = parser.parse_args(cmd_line);

    if args.command == 'create':
        add_slurm_kernel(args.displayname, args.language, args.kernel_cmd, args.slurm_parameter, args.loginnode, args.user, args.proxyjump, args.srun_cmd, args.environment);
    elif args.command == 'list':
        list_slurm_kernel(all=args.all, verbose=args.verbose);
    elif args.command == 'modify':
        modify_slurm_kernel(args.editor);
    elif args.command == 'delete':
        delete_slurm_kernel();
    elif args.command == 'rinit':
        remote_initialization(args.loginnode, args.user, args.proxyjump, args.dry_run);

if __name__ == '__main__':
    main();

