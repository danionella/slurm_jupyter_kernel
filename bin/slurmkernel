#!/usr/bin/env python3

"""

slurmkernel

"""

import argparse;
import json;
import sys;
import os;
import getpass;
import re;
import tempfile;
import slurm_jupyter_kernel;
from pathlib import Path;
from shutil import copy
try:
    from jupyter_client import kernelspec;
except ImportError:
    from IPython.kernel import kernelspec;

def add_slurm_kernel (displayname, kernelcmd, slurm_parameter, loginnode, proxyjump, srun_cmd):
   
    print(f'Try to create new jupyter slurm kernel "{displayname}" ...');
    args = [str(sys.executable), '-m', 'slurm_jupyter_kernel'];

    args.extend(['--slurm-parameter', slurm_parameter]);
    args.extend(['--loginnode', loginnode]);
    args.extend(['--proxyjump', proxyjump]);
    if srun_cmd is None:
        srun_cmd = 'srun';
    args.extend(['--srun-cmd', srun_cmd]);

    kernelcmd = kernelcmd.format(connection_file='{remote_connection_file}');
    args.extend(['--kernel-cmd', kernelcmd]);
    args.extend(['--connection-file', '{connection_file}']);

    if not re.search('slurm', str(displayname), re.IGNORECASE):
        displayname = "SLURM " + str(displayname);

    kerneldir_name = displayname.replace(' ', '_');
    username = getpass.getuser();

    json_kernel = {
        'display_name': displayname,
        'argv': args,
    };

    # create a temporary jupyter kernel directory
    tempdir = tempfile.mkdtemp();

    kernel_loc = os.path.join(str(tempdir), 'kernel.json');
    with open(os.path.join(tempdir, 'kernel.json'), 'w') as kfile:
        json.dump(json_kernel, kfile, indent=2, sort_keys=True);

    img_dir = str(Path(slurm_jupyter_kernel.__file__).parent.parent) + '/imgs/';
    if os.path.isdir(str(img_dir)):
        copy(str(img_dir) + 'logo-32x32.png', str(tempdir));
        copy(str(img_dir) + 'logo-64x64.png', str(tempdir));

    kernelspec.install_kernel_spec(tempdir, kerneldir_name, user=username);

    filt = open(tempdir +'/kernel.json');
    print(filt.read())
    print('');

    print(f'Successfully created kernel "{displayname}" :-)');

def main (cmd_line=None):

    parser = argparse.ArgumentParser('Adding jupyter kernels using slurm');
    subparser = parser.add_subparsers(dest='command');

    add_option = subparser.add_parser('create', help='create a new slurm kernel');

    add_option.add_argument('--displayname', required=True, help='Display name of the new kernel');
    add_option.add_argument('--loginnode', required=True, help='The login node to connect to');
    add_option.add_argument('--proxyjump', help='Add a proxy jump (SSH -J)');
    add_option.add_argument('--srun-cmd', help='Path to srun command. Default: srun');
    add_option.add_argument('--kernel-cmd', required=True, help='command to run jupyter kernel');
    add_option.add_argument('--slurm-parameter', required=True, help='Slurm job parameter');

    if len(sys.argv) == 1:
        parser.print_help();
        sys.exit();
    args = parser.parse_args(cmd_line);

    if args.command == 'create':
        add_slurm_kernel(args.displayname, args.kernel_cmd, args.slurm_parameter, args.loginnode, args.proxyjump, args.srun_cmd);

if __name__ == '__main__':
    main();

