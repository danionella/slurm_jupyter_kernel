#!/usr/bin/env python3

"""
slurmkernel
"""

import argparse;
import json;
import sys;
import os;
import getpass;
import re;
import tempfile;
import slurm_jupyter_kernel;
from pathlib import Path;
from shutil import copy
try:
    from jupyter_client import kernelspec;
except ImportError:
    from IPython.kernel import kernelspec;

def add_slurm_kernel (displayname, language, kernelcmd, slurm_parameter, loginnode, proxyjump, srun_cmd, environment):
   
    print(f'Try to create new jupyter slurm kernel "{displayname}" ...');
    args = [str(sys.executable), '-m', 'slurm_jupyter_kernel'];

    args.extend(['--slurm-parameter', slurm_parameter]);
    args.extend(['--loginnode', loginnode]);
    args.extend(['--proxyjump', proxyjump]);
    if srun_cmd is None:
        srun_cmd = 'srun';
    args.extend(['--srun-cmd', srun_cmd]);

    kernelcmd = kernelcmd.format(connection_file='{remote_connection_file}');
    args.extend(['--kernel-cmd', kernelcmd]);
    args.extend(['--connection-file', '{connection_file}']);

    if not re.search('slurm', str(displayname), re.IGNORECASE):
        displayname = "Slurm " + str(displayname);

    kerneldir_name = displayname.replace(' ', '_');
    username = getpass.getuser();

    if not environment is None:
        kernel_env = dict( (key.strip(), val.strip()) for key, val in (item.split('=') for item in environment.split(',')) ); 
        args.extend(['--environment', str(kernel_env)]);

    json_kernel = {
        'display_name': displayname,
        'env': kernel_env,
        'metadata': {"remote_slurm_kernel": True},
        'argv': args
    };
    if not language is None:
        json_kernel['language'] = language;

    # create a temporary jupyter kernel directory
    tempdir = tempfile.mkdtemp();

    kernel_loc = os.path.join(str(tempdir), 'kernel.json');
    with open(os.path.join(tempdir, 'kernel.json'), 'w') as kfile:
        json.dump(json_kernel, kfile, indent=2, sort_keys=True);

    img_dir = str(Path(slurm_jupyter_kernel.__file__).parent.parent) + '/imgs/';
    if os.path.isdir(str(img_dir)):
        copy(str(img_dir) + 'logo-32x32.png', str(tempdir));
        copy(str(img_dir) + 'logo-64x64.png', str(tempdir));

    kernelspec.install_kernel_spec(tempdir, kerneldir_name, user=username);

    filt = open(tempdir +'/kernel.json');
    print(filt.read())
    print('');

    print(f'Successfully created kernel "{displayname}" :-)');

def list_slurm_kernel (all=False, verbose=False):

    kernelspecs = kernelspec.find_kernel_specs();
    slurm_kernels = {};

    # iterate throuh all available kernels
    for kernel, file in kernelspecs.items():
        kernel_spec = kernelspec.get_kernel_spec(kernel);
        add = False;
        if all:
            add = True;
        else:
            try:
                is_slurm_kernel = kernel_spec.metadata['remote_slurm_kernel'] or None;
                if is_slurm_kernel == True:
                    add = True;
            except KeyError:
                # current slurm kernel is no jupyter slurm kernel
                pass;
        if add:
            slurm_kernels.update({str(file): [kernel_spec.name, kernel_spec.display_name, kernel_spec.language, kernel_spec.env]});

    if len(slurm_kernels) >= 1:
        print("\033[4mFollowing kernels found:\033[0m\n");
        for kernel, data in slurm_kernels.items():
            print(f'\033[94m\u27A4\033[0m \033[95m{kernel}\033[0m');
            if verbose:
                if data[0]:
                    print(f'  \u2937  \033[1mKernel Name  : \033[0m{data[0]}');
                else:
                    kernelname = kernel.split('/')[-1];
                    print(f'  \u2937  \033[1mKernel Name  : \033[0m{kernelname}') ;
                if data[2]: print(f'  \u2937  \033[1mLanguage     : \033[0m{data[2]}');
                if data[1]: print(f'  \u2937  \033[1mDisplay Name : \033[0m{data[1]}');
                if data[3]: print(f'  \u2937  \033[1mEnvironment  : \033[0m{data[3]}');
                print('');
    else:
        print('Currently no installed kernels found!');

def main (cmd_line=None):

    parser = argparse.ArgumentParser('Adding jupyter kernels using slurm');
    subparser = parser.add_subparsers(dest='command');

    add_option = subparser.add_parser('create', help='create a new slurm kernel');

    add_option.add_argument('--displayname', required=True, help='Display name of the new kernel');
    add_option.add_argument('--environment', required=False, help='Jupyter kernel environment');
    add_option.add_argument('--language', help='Programming language');
    add_option.add_argument('--loginnode', required=True, help='The login node to connect to');
    add_option.add_argument('--proxyjump', help='Add a proxy jump (SSH -J)');
    add_option.add_argument('--srun-cmd', help='Path to srun command. Default: srun');
    add_option.add_argument('--kernel-cmd', required=True, help='command to run jupyter kernel');
    add_option.add_argument('--slurm-parameter', required=True, help='Slurm job parameter');

    list_option = subparser.add_parser('list', help='list available slurm kernel');
    list_option.add_argument('-v', '--verbose', action='store_true', required=False, help='Print all kernel with the kernelspec information');
    list_option.add_argument('-a', '--all', action='store_true', required=False, help='Print all available Jupyter kernels');

    if len(sys.argv) == 1:
        parser.print_help();
        sys.exit();
    args = parser.parse_args(cmd_line);

    if args.command == 'create':
        add_slurm_kernel(args.displayname, args.language, args.kernel_cmd, args.slurm_parameter, args.loginnode, args.proxyjump, args.srun_cmd, args.environment);
    elif args.command == 'list':
        list_slurm_kernel(all=args.all, verbose=args.verbose);

if __name__ == '__main__':
    main();

